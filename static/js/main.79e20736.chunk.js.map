{"version":3,"sources":["Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todolist","props","useState","newTaskTitle","setNewTaskTitle","error","setError","title","value","onChange","e","currentTarget","onKeyPress","charCode","addTask","className","onClick","trim","tasks","map","task","isDone","type","changeStatus","id","checked","deleteTask","changeFilter","filter","App","v1","setTask","setFilter","tasksForTodolist","filteredTasks","newTasks","taskId","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79e20736.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\nimport {FilterValuesType} from \"./App\";\nimport {Simulate} from \"react-dom/test-utils\";\n\n\nexport type TodolistPropsType = {\n    title: string;\n    tasks: Array<TaskType>;\n    deleteTask: (id: string) => void;\n    changeFilter: (value: FilterValuesType) => void;\n    addTask: (title: string) => void;\n    changeStatus: (taskId: string, isDone: boolean) => void;\n    filter: FilterValuesType;\n}\n\nexport type TaskType = {\n    id: string;\n    title: string;\n    isDone: boolean;\n}\n\nexport function Todolist(props: TodolistPropsType) {\n\n    const [newTaskTitle, setNewTaskTitle] = useState(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const addTask = () => {\n        if (newTaskTitle.trim() !== \"\") {\n            props.addTask(newTaskTitle.trim())\n            setNewTaskTitle(\"\")\n        } else {\n            setError(\"Title is required\");\n        }\n\n    }\n\n\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTaskTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: any) => {\n        setError(null)\n        if (e.charCode === 13) {\n            props.addTask(newTaskTitle)\n            setNewTaskTitle(\"\")\n        }\n    }\n\n    const onAllClickFilter = () => props.changeFilter(\"all\")\n    const onActiveClickFilter = () => props.changeFilter(\"active\")\n    const onCompletedClickFilter = () => props.changeFilter(\"completed\")\n\n\n    return (\n        <div>\n            <h3>{props.title}</h3>\n            <div>\n                <input\n                    value={newTaskTitle}\n                    onChange={onNewTitleChangeHandler}\n                    onKeyPress={onKeyPressHandler}\n                    className={error ? \"error\" : '\"'}\n                />\n                <button onClick={addTask}>+</button>\n                {error && <div className=\"error-message\">{error}</div>}\n\n            </div>\n            <ul>\n                {\n                    props.tasks.map((task) => {\n                        const onRemoveHandler = () => props.deleteTask(task.id)\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n                            props.changeStatus(task.id, e.currentTarget.checked)\n                        }\n\n                        return <li\n                            key={task.id}\n                            className={task.isDone ? \"is-Done\" : \"\"}\n                        >\n                            <input type=\"checkbox\"\n                                   onChange={onChangeHandler}\n                                   checked={task.isDone}/>\n                            <span>{task.title}</span>\n                            <button onClick={onRemoveHandler}>x</button>\n                        </li>\n                    })\n                }\n\n            </ul>\n            <div>\n                <button\n                    onClick={onAllClickFilter}\n                    className={props.filter === 'all' ? \"active-filter\" : \"\"}\n                >All\n                </button>\n                <button\n                    onClick={onActiveClickFilter}\n                    className={props.filter === 'active' ? \"active-filter\" : \"\"}\n                >Active\n                </button>\n                <button\n                    onClick={onCompletedClickFilter}\n                    className={props.filter === 'completed' ? \"active-filter\" : \"\"}\n                >Completed\n                </button>\n            </div>\n        </div>\n    )\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from './Todolist';\nimport {v1} from \"uuid\";\n\n\nexport type FilterValuesType = \"all\"  | \"completed\" |  \"active\";\n\nfunction App() {\n\n    let [tasks, setTask] = useState<Array<TaskType>>([\n        {id: v1(), title: \"css\", isDone: false},\n        {id: v1(), title: \"html\", isDone: false},\n        {id: v1(), title: \"javaScript\", isDone: false},\n        {id: v1(), title: \"react\", isDone: false},\n        {id: v1(), title: \"redux\", isDone: false},\n        {id: v1(), title: \"typeScript\", isDone: false},\n    ])\n    let [filter, setFilter] = useState<FilterValuesType>(\"all\")\n\n    function deleteTask(id: string) {\n      let filteredTasks = tasks.filter(task => task.id !== id)\n        setTask(filteredTasks)\n     }\n     function addTask( title: string) {\n        let newTask = {id: v1(), title: title, isDone: false }\n         let newTasks = [newTask, ...tasks];\n        setTask(newTasks)\n     }\n     function changeStatus(taskId: string, isDone: boolean){\n        let task  = tasks.find(task => task.id === taskId);\n        if(task){\n            task.isDone = isDone\n        }\n         setTask([...tasks])\n     }\n\n\n\n     function changeFilter(value: FilterValuesType) {\n        setFilter(value)\n         \n     }\n\n     let tasksForTodolist = tasks;\n    if (filter === \"completed\") {\n        tasksForTodolist = tasks.filter(tasks => tasks.isDone  === true)\n    }\n    if (filter === \"active\") {\n        tasksForTodolist = tasks.filter(tasks => tasks.isDone  === false)\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Todolist\n                title=\"What to learn\"\n                tasks={tasksForTodolist}\n                deleteTask={deleteTask}\n                changeFilter={changeFilter}\n                addTask={addTask}\n                changeStatus ={changeStatus}\n                filter = {filter}\n\n            />\n        </div>\n    );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}